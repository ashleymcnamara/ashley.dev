---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import BlueskyLikes from '../../components/BlueskyLikes.astro';

// Generate static paths for all posts
export async function getStaticPaths() {
  const blogEntries = await getCollection('posts');
  
  return blogEntries.map((entry: CollectionEntry<'posts'>) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// The entry prop is passed from getStaticPaths
const { entry } = Astro.props;
const { Content } = await entry.render();

// Safely handle the date
let formattedDate;
try {
  formattedDate = new Date(entry.data.date).toLocaleDateString('en-US', {
    year: 'numeric', month: 'long', day: 'numeric'
  });
} catch (e) {
  formattedDate = "Publication date unavailable";
  console.error("Error formatting date:", e);
}

// Check if Bluesky URI is valid
const hasBlueskyURI = entry.data.blueskyPostURI && typeof entry.data.blueskyPostURI === 'string' && entry.data.blueskyPostURI.trim() !== '';
---

<Layout title={entry.data.title}>
  <!-- Reading Progress Bar -->
  <div id="progress-bar" class="reading-progress-bar"></div>

  <!-- Start: Main Wrapper -->
  <main class="flex flex-col w-full max-w-full md:max-w-7xl border border-gray-600 rounded-2xl overflow-hidden shadow-2xl relative bg-black mb-6 mx-auto blog-post">
    
    <!-- Start: Content Area -->
    <div class="w-full p-0">
      <!-- Start: Inner wrapper -->
      <div class="min-h-full flex flex-col">
        
        <!-- Start: Header bar (similar to the tab bar in home) -->
        <div class="flex flex-col bg-black border-b border-gray-600 sticky top-0 z-10 p-4 backdrop-blur-md bg-opacity-90">
          <div class="flex-grow">
            <a href="/blog" class="px-4 py-2.5 border border-gray-600 rounded-lg hover:text-primary hover:border-primary transition-all duration-300 inline-block mb-4 back-button">
              &larr; Back to Blog
            </a>
            <h1 class="text-3xl md:text-4xl font-bold post-title">{entry.data.title}</h1>
          </div>
        </div>
        <!-- End: Header bar -->

        <!-- Start: Post content -->
        <div class="p-6 flex-grow overflow-y-auto bg-black">
          <article>
            <div class="flex flex-wrap items-center gap-3 mb-8 meta-info">
              <p class="text-gray-400">{formattedDate}</p>
              
              <!-- Tags display -->
              <div class="flex flex-wrap gap-2">
                {entry.data.tags?.map((tag: string) => (
                  <span class="inline-flex items-center justify-center px-3 py-1 text-xs rounded-full bg-black text-gray-100 cursor-pointer transition-all duration-300 border border-gray-600 hover:bg-primary hover:-translate-y-1 hover:text-white tag-link" data-tag={tag}>
                    #{tag}
                  </span>
                ))}
              </div>
            </div>
            
            <div class="prose prose-invert max-w-none post-content">
              <Content />
            </div>
            
            <!-- Bluesky Likes Component -->
            {hasBlueskyURI && (
              <div class="bluesky-component-wrapper">
                <BlueskyLikes blueskyPostURI={entry.data.blueskyPostURI} />
              </div>
            )}
          </article>
        </div>
        <!-- End: Post content -->
        
      </div>
      <!-- End: Inner wrapper -->
    </div>
    <!-- End: Content Area -->
    
  </main>
  <!-- End: Main Wrapper -->
  
</Layout>

<script>
  // Make tag spans clickable to filter
  document.addEventListener('DOMContentLoaded', () => {
    // Reading progress bar functionality
    const progressBar = document.getElementById('progress-bar');
    let totalHeight = document.body.scrollHeight - window.innerHeight;
    
    // Recalculate height on window resize
    window.addEventListener('resize', () => {
      totalHeight = document.body.scrollHeight - window.innerHeight;
    });
    
    // Recalculate after images and other resources load
    window.addEventListener('load', () => {
      totalHeight = document.body.scrollHeight - window.innerHeight;
    });
    
    window.addEventListener('scroll', () => {
      // Make sure we have the most accurate height measurement
      const currentHeight = document.body.scrollHeight - window.innerHeight;
      if (currentHeight !== totalHeight) {
        totalHeight = currentHeight;
      }
      
      const progress = Math.min((window.scrollY / totalHeight) * 100, 100);
      if (progressBar) progressBar.style.width = `${progress}%`;
    });
    
    const tagLinks = document.querySelectorAll('.tag-link');
    
    tagLinks.forEach(link => {
      link.addEventListener('click', () => {
        // Extract tag name from the data attribute
        const tagName = link.getAttribute('data-tag');
        
        // Navigate to blog page with tag as query parameter
        window.location.href = `/blog?tag=${tagName}`;
      });
    });
    
    // Add functionality for the back button to remember which referrer it came from
    const backButton = document.querySelector('a[href="/blog"]') as HTMLAnchorElement;
    if (backButton) {
      const referrer = document.referrer;
      
      // Check if the referrer is from our own site and extract the path
      if (referrer) {
        try {
          const referrerURL = new URL(referrer);
          if (referrerURL.pathname === '/speaking') {
            backButton.href = '/speaking';
            backButton.textContent = '← Back to Speaking';
          } else if (referrerURL.pathname === '/projects') {
            backButton.href = '/projects';
            backButton.textContent = '← Back to Projects';
          }
        } catch (e) {
          console.error("Error parsing referrer URL:", e);
        }
      }
    }
    
    // Force all links in blog content to be the primary color
    const primaryColor = getComputedStyle(document.documentElement).getPropertyValue('--color-primary').trim() || '#F43F5E';
    const postLinks = document.querySelectorAll('.post-content a, .prose a');
    
    postLinks.forEach(link => {
      link.style.color = primaryColor;
      link.style.textDecoration = 'none';
      
      // Add event listener to recreate the hover effect from CSS
      link.addEventListener('mouseenter', (e) => {
        const target = e.target as HTMLElement;
        target.style.opacity = '0.9';
      });
      
      link.addEventListener('mouseleave', (e) => {
        const target = e.target as HTMLElement;
        target.style.opacity = '1';
      });
    });
    
    // DIRECT STYLING FOR HEADINGS: Force all headings to be pink
    const allHeadings = document.querySelectorAll('.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6');
    allHeadings.forEach(heading => {
      (heading as HTMLElement).style.color = primaryColor;
    });
    
    // Set up a mutation observer to handle dynamically loaded content
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          const newHeadings = document.querySelectorAll('.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6');
          newHeadings.forEach(heading => {
            (heading as HTMLElement).style.color = primaryColor;
          });
        }
      });
    });
    
    // Start observing the document with the configured parameters
    observer.observe(document.body, { childList: true, subtree: true });
  });
</script>

<style>
  /* Reading progress bar */
  .reading-progress-bar {
    position: fixed;
    top: 0;
    left: 0;
    height: 3px;
    background-color: var(--color-primary, #F43F5E);
    width: 0%;
    z-index: 100;
    transition: width 0.1s ease;
  }
  
  /* Enhanced styling for blog content */
  .blog-post {
    transition: all 0.3s ease-in-out;
  }
  
  .post-title {
    color: var(--color-primary, #F43F5E);
    line-height: 1.3;
    letter-spacing: -0.01em;
    margin-bottom: 0.5rem;
  }
  
  .back-button {
    font-weight: 500;
    letter-spacing: 0.02em;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }
  
  .meta-info {
    border-bottom: 1px solid rgba(107, 114, 128, 0.2);
    padding-bottom: 1.5rem;
  }
  
  .post-content {
    color: #f8f8f8;
    font-size: 1.05rem;
    line-height: 1.8;
    letter-spacing: 0.01em;
  }
  
  .post-content p {
    margin-bottom: 1.5rem;
  }
  
  /* Strengthened link selectors to override any potential conflicts */
  .prose a,
  .prose a:link,
  .prose a:visited,
  article .prose p a,
  .post-content .prose a {
    color: var(--color-primary, #F43F5E) !important;
    text-decoration: none;
    position: relative;
    transition: all 0.2s ease;
  }
  
  .prose a:hover {
    text-decoration: none;
    color: var(--color-primary, #F43F5E);
    opacity: 0.9;
  }
  
  .prose a::after {
    content: '';
    position: absolute;
    width: 100%;
    transform: scaleX(0);
    height: 1px;
    bottom: 0;
    left: 0;
    background-color: var(--color-primary, #F43F5E);
    transform-origin: bottom right;
    transition: transform 0.25s ease-out;
  }
  
  .prose a:hover::after {
    transform: scaleX(1);
    transform-origin: bottom left;
  }
  
  .prose img {
    border-radius: 0.75rem;
    margin: 2rem 0;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease;
  }
  
  .prose img:hover {
    transform: scale(1.01);
  }
  
  .prose code {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 0.25rem;
    padding: 0.2rem 0.4rem;
    font-size: 0.9em;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .prose pre {
    padding: 1.25rem !important;
    border-radius: 0.5rem !important;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    margin: 1.5rem 0 !important;
    overflow-x: auto;
  }
  
  .prose blockquote {
    border-left: 4px solid var(--color-primary, #F43F5E);
    padding-left: 1rem;
    font-style: italic;
    margin: 1.5rem 0;
    color: #d1d5db;
    background: rgba(255, 255, 255, 0.05);
    padding: 1rem;
    border-radius: 0.25rem;
  }
  
  /* Strengthened selectors for headings to override Tailwind prose defaults */
  .prose h1, 
  .prose h2, 
  .prose h3, 
  .prose h4,
  .post-content h1,
  .post-content h2,
  .post-content h3,
  .post-content h4,
  article .prose h1,
  article .prose h2,
  article .prose h3,
  article .prose h4 {
    margin-top: 2rem;
    margin-bottom: 1rem;
    line-height: 1.3;
    font-weight: 700;
    color: var(--color-primary, #F43F5E) !important; /* Added !important to ensure override */
  }
  
  .prose h1,
  .post-content h1 {
    font-size: 2em;
    margin-top: 0;
  }
  
  .prose h2,
  .post-content h2 {
    font-size: 1.7em;
  }
  
  .prose h3,
  .post-content h3 {
    font-size: 1.4em;
  }
  
  .prose h4 {
    font-size: 1.2em;
  }
  
  /* Add subtle reveal animation when the page loads */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .post-content {
    animation: fadeIn 0.6s ease-out;
  }
</style>