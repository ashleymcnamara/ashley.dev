---
// Import from Astro's Content Collections API
import { getCollection } from 'astro:content';

// Get all blog posts from the "posts" collection
const allPosts = await getCollection('posts');

// Sort posts by date (newest first)
const sortedPosts = allPosts.sort((a: any, b: any) => {
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Function to format dates in a readable way
function formatDate(date: string | Date): string {
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// Function to extract a preview from the markdown content
function extractPreview(content: string, maxLength: number = 150): string {
  // Remove frontmatter if present (shouldn't be needed but just to be safe)
  const contentWithoutFrontmatter = content.replace(/^---(.|\n)*?---/, '').trim();
  
  // Remove Markdown headings, links, images, and other formatting
  const plainText = contentWithoutFrontmatter
    .replace(/#+\s(.*)/g, '$1') // Remove headings
    .replace(/!\[(.*?)\]\((.*?)\)/g, '') // Remove images
    .replace(/\[(.*?)\]\((.*?)\)/g, '$1') // Convert links to just their text
    .replace(/(\*\*|__)(.*?)(\*\*|__)/g, '$2') // Remove bold
    .replace(/(\*|_)(.*?)(\*|_)/g, '$2') // Remove italic
    .replace(/\n/g, ' ') // Replace newlines with spaces
    .trim();
  
  // Truncate to maxLength and add ellipsis if needed
  if (plainText.length > maxLength) {
    return plainText.substring(0, maxLength) + '...';
  }
  
  return plainText;
}

// Extract all unique tags from blog posts
const allTags = [...new Set(sortedPosts.flatMap(post => 
  // Filter out any empty tags before adding to the set
  (post.data.tags || []).filter(tag => tag && tag.trim().length > 0)
))].sort();
---

<div>
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-semibold text-white">Latest Posts</h2>
        <a href="/subscribe" 
           class="flex items-center gap-2 px-3 py-1.5 border border-gray-600 rounded-lg text-gray-200 hover:text-primary hover:border-primary transition-all duration-150"
           aria-label="Subscribe to RSS feed">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M4 11a9 9 0 0 1 9 9"></path>
                <path d="M4 4a16 16 0 0 1 16 16"></path>
                <circle cx="5" cy="19" r="1"></circle>
            </svg>
            <span>Subscribe</span>
        </a>
    </div>
    
    <div class="grid grid-cols-1 gap-6 mb-10">
        {sortedPosts.length === 0 ? (
            <div class="flex flex-col justify-center items-start border border-gray-700 rounded-lg p-6 bg-black">
                <p class="text-gray-400">No blog posts found. Make sure your content collection is properly set up.</p>
            </div>
        ) : (
            sortedPosts.map((post, index) => {
                const preview = extractPreview(post.body);
                return (
                <div class="flex flex-col justify-center items-start border border-gray-700 rounded-lg p-6 bg-black blog-post" data-tags={post.data.tags?.join(',')}>
                    <div class="w-full">
                        <a 
                            href={`/posts/${post.slug}`}
                            class="text-white hover:text-primary"
                        >
                            <h3 class="text-xl font-semibold mb-2">{post.data.title}</h3>
                        </a>
                        <p class="text-sm text-gray-400">{formatDate(post.data.date)}</p>
                    </div>
                    
                    <!-- Tags display -->
                    <div class="flex flex-wrap gap-1 mt-2 mb-4">
                        {post.data.tags?.map(tag => (
                            <span class="tag-span inline-flex items-center justify-center px-2 py-1 text-xs rounded-lg bg-black text-gray-100 cursor-pointer transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5">
                                #{tag}
                            </span>
                        ))}
                    </div>
                    
                    <!-- Post preview -->
                    <div class="text-gray-300 mb-4 mt-2">
                        <p>{preview}</p>
                    </div>
                    
                    <a 
                        href={`/posts/${post.slug}`}
                        class="px-4 py-2.5 mt-2 text-center border border-gray-600 rounded-lg hover:text-primary hover:border-primary"
                    >
                        Read More
                    </a>
                </div>
                )
            })
        )}
    </div>
    
    <!-- No results message -->
    <div id="no-results" class="hidden py-4 text-center text-gray-400">
        No posts found for the selected tag.
    </div>
    
    <!-- Tag filter section -->
    <div class="mt-10 pt-6 border-t border-gray-700">
        <h3 class="text-xl font-semibold text-white mb-4">Filter by Tags</h3>
        <div class="flex flex-wrap gap-2" id="tag-filters">
            <button class="tag-filter active flex items-center justify-center px-3 py-1 text-sm rounded-lg bg-black text-gray-100 transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5" data-tag="all" aria-label="Show all posts" aria-pressed="true">
                All Posts
            </button>
            {allTags.map(tag => (
                <button class="tag-filter flex items-center justify-center px-3 py-1 text-sm rounded-lg bg-black text-gray-100 transition-all duration-150 border border-gray-600 hover:bg-primary hover:-translate-y-0.5" data-tag={tag} aria-label={`Filter by tag ${tag}`} aria-pressed="false">
                    #{tag}
                </button>
            ))}
        </div>
    </div>
</div>

<script is:inline>
  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Simple function to filter by tag
    function filterByTag(selectedTag) {
      // Get all tag filter buttons
      const tagButtons = document.querySelectorAll('.tag-filter');
      
      // Reset all buttons to inactive state
      tagButtons.forEach(btn => {
        btn.classList.remove('active');
        btn.classList.remove('bg-primary');
        btn.classList.add('bg-black');
        btn.setAttribute('aria-pressed', 'false');
      });
      
      // Find and activate the selected tag button
      const selectedButton = document.querySelector(`.tag-filter[data-tag="${selectedTag}"]`);
      if (selectedButton) {
        selectedButton.classList.add('active');
        selectedButton.classList.remove('bg-black');
        selectedButton.classList.add('bg-primary');
        selectedButton.setAttribute('aria-pressed', 'true');
      } else {
        return;
      }
      
      // Get all blog posts
      const posts = document.querySelectorAll('.blog-post');
      let visibleCount = 0;
      
      // Filter posts
      posts.forEach(post => {
        const postTags = post.getAttribute('data-tags')?.split(',') || [];
        
        if (selectedTag === 'all' || postTags.some(tag => tag.toLowerCase() === selectedTag.toLowerCase())) {
          post.style.display = '';
          visibleCount++;
        } else {
          post.style.display = 'none';
        }
      });
      
      // Show/hide no results message
      const noResultsMessage = document.getElementById('no-results');
      if (noResultsMessage) {
        noResultsMessage.classList.toggle('hidden', visibleCount > 0);
      }
    }
    
    // Add click event to tag filter buttons
    document.querySelectorAll('.tag-filter').forEach(button => {
      button.addEventListener('click', () => {
        const tag = button.getAttribute('data-tag');
        if (tag) filterByTag(tag);
      });
    });
    
    // Add click event to tag spans within blog posts
    document.querySelectorAll('.tag-span').forEach(span => {
      span.addEventListener('click', () => {
        let tagText = span.textContent?.trim() || '';
        if (tagText.startsWith('#')) {
          tagText = tagText.substring(1);
        }
        
        if (tagText) {
          filterByTag(tagText);
          
          // Scroll to filters
          const filtersContainer = document.getElementById('tag-filters');
          if (filtersContainer) {
            filtersContainer.scrollIntoView({ behavior: 'smooth' });
          }
        }
      });
    });
    
    // Check for the stored tag parameter from the blog.astro page
    if (window.tagToFilter) {
      // Give the DOM a moment to fully render
      setTimeout(() => {
        filterByTag(window.tagToFilter);
      }, 100);
    }
  });
</script>

<style>
/* Override the hidden class from the global styles */
.blog-post .hidden {
    display: none;
}
</style>
